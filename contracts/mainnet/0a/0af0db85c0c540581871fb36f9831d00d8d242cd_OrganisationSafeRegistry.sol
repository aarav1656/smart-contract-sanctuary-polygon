/**
 *Submitted for verification at polygonscan.com on 2023-04-06
*/

//0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2
/*
0x1688f0b90000000000000000000000003e5c63644e683549055b9be8653de26e0b4cd36e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000018756d9381300000000000000000000000000000000000000000000000000000000000001c4b63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000938d18b5bfb3d03d066052d6e513d2915d8797a000000000000000000000000060f90a08e070a4b033b6d2c300e3af18fea5ccd0000000000000000000000000a43eb2e505bab9a227de843e7747ba20d13402c7000000000000000000000000f496c0867ac3a1d392c825b51972c4f0ad06d984000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
*/
// SPDX-License-Identifier: GPL-3.0

pragma solidity =0.8.19;
interface ISafeProxyFactory {
    function createProxyWithNonce(address _singleton, bytes calldata initializer, uint256 saltNonce) external returns (address proxy);
}

contract OrganisationSafeRegistry {
    address internal SAFE_PROXY_FACTORY_ADDR = 0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2;

    struct Organisation {
        address[] proxies;
    }

    mapping(string => Organisation) internal organisations;

    function createProxyWithNonce(string memory organisationName, address singleton, bytes calldata initializer, uint256 saltNonce) external returns (address) {
        address proxy = ISafeProxyFactory(SAFE_PROXY_FACTORY_ADDR).createProxyWithNonce(singleton, initializer, saltNonce);
        organisations[organisationName].proxies.push(proxy);
        return proxy;
    }

    function getOrganisationProxies(string memory organisationName) external view returns (address[] memory) {
        return organisations[organisationName].proxies;
    }
    
    function getOrganisationProxyCount(string memory organisationName) external view returns (uint256) {
        return organisations[organisationName].proxies.length;
    }
}